#ifndef GL_ES
#version 330 es
#endif

precision highp sampler3D;
precision highp float;

const int COLOR_MAX_COUNT = 10;

uniform sampler3D volumeTexture;
uniform float stepSize;
uniform vec3 size;
uniform vec2 densityThreshold; // Min and max density to display
uniform float colorDefinitionsDensity[COLOR_MAX_COUNT]; // Thresholds for each color, must be ordered in ascending order, [0...1]
uniform vec4 colorDefinitionsColor[COLOR_MAX_COUNT]; // Colors for density threshold
uniform vec4 offColor; // The "background" color within the box

in vec3 vOrigin;
in vec3 vDirection;
in vec3 vCameraPosition;

out vec4 frag_color;


float sampleData(vec3 coord) {
  return texture(volumeTexture, coord).x;
}

vec4 sampleColor(float density) {
  // Note: Color steps must be ordered 0->1 in
  // order for this to sample the correct color!
  // TODO: Would be pretty easy to do a gradient here
  for (int i = COLOR_MAX_COUNT - 1; i >= 0; i--) {
    float thr = colorDefinitionsDensity[i];
    if (thr >= 0.0 && density >= thr) {
      return colorDefinitionsColor[i];
    }
  }
  return offColor;
}

// Intersection of a ray and an axis-aligned bounding box.
// Returns the intersections as the minimum and maximum distance along the ray direction.
vec2 intersectAABB(vec3 rayOrigin, vec3 rayDir, vec3 boxMin, vec3 boxMax) {
  vec3 tMin = (boxMin - rayOrigin) / rayDir;
  vec3 tMax = (boxMax - rayOrigin) / rayDir;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);
  return vec2(tNear, tFar);
}

vec4 sampleAlongRay(vec3 entryPoint, vec3 direction, float rayStep, float boxStart, float boxEnd, float sampleCount) {
  // Loop through all samples along the ray, sample the density using max intensity projection.
  float density = 0.0;
  for (float i = 0.0; i < sampleCount; i += rayStep) {
    float rayDistance = boxStart + i;
    vec3 samplePoint = entryPoint + direction * rayDistance;
    float value = sampleData(samplePoint);
    density = max(density, value);

    if (density >= 1.0 || rayDistance > boxEnd) {
      // Early return if max found or out if box
      break;
    }
  }

  vec4 color = offColor;
  //if (density >= densityThreshold.x && density <= densityThreshold.y) {
  if (density >= 0.0 && density <= 0.99) {
    vec4 densityColor = sampleColor(density);
    color.rgb = densityColor.rgb;
    color.a = densityColor.a * density;
  }

  return color;
}

void main() {

  vec3 rayDir = normalize(vDirection);
  vec3 rayOrigin = vOrigin;

  vec3 boxMin = -vec3(0.5);
  vec3 boxMax =  vec3(0.5);
  vec2 intersect = intersectAABB(rayOrigin, rayDir, boxMin, boxMax);

  vec4 color = offColor;
  if (intersect.x <= intersect.y) {

    vec3 origin = rayOrigin;
    vec3 pBoxEntry = origin + intersect.x * rayDir;
    vec3 pBoxExit = origin + intersect.y * rayDir;
    float boxDist = length(pBoxExit - pBoxEntry);

    float rayStepDistance = 0.001;
    float sampleCount = boxDist / rayStepDistance;
    vec3 rayStep = vec3(rayStepDistance);

    vec3 scale = normalize(size);
    vec3 boxToTex = 1.0 / scale;

    float density = 0.0;
    for (float i = 0.0; i < sampleCount; i += 1.0) {

      vec3 pBox = (pBoxEntry + rayDir * rayStep * i);
      vec3 pTex = pBox * boxToTex + vec3(0.5);
      float d = sampleData(pTex);

      density = max(density, d);
      if (density >= 1.0) {
        break;
      }
    }

    if (density >= densityThreshold.x && density <= densityThreshold.y) {
      vec4 densityColor = sampleColor(density);
      color.rgb = densityColor.rgb;
      color.a = densityColor.a * density;
    }
  }

  frag_color = color;
}